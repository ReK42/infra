---
name: ddi

services:
  adguardhome:
    container_name: adguardhome
    image: docker.io/adguard/adguardhome:${ADGUARDHOME_VERSION}
    restart: unless-stopped
    env_file:
      - stack.env
    ports:
      - 53:53/tcp      # DNS
      - 53:53/udp      # DNS
      - 853:853/tcp    # DNS-over-TLS
      - 853:853/udp    # DNS-over-QUIC
      - 5443:5443/tcp  # DNSCrypt
      - 5443:5443/udp  # DNSCrypt
    networks:
      - dns
      - proxy
    volumes:
      - adguardhome_config:/opt/adguardhome/conf
      - adguardhome_work:/opt/adguardhome/work
    labels:  # TODO: Authentication
      caddy: "adguardhome.${DOMAIN}"
      caddy.reverse_proxy: "{{ upstreams 3000 }}"

  pdns-auth:
    container_name: pdns-auth
    image: docker.io/pschiffe/pdns-mysql:${PDNS_AUTH_VERSION}
    restart: unless-stopped
    depends_on:
      pdns-mariadb:
        condition: service_healthy
    env_file:
      - stack.env
    networks:
      - dns

  pdns-admin:
    container_name: pdns-admin
    image: docker.io/pschiffe/pdns-admin:${PDNS_ADMIN_VERSION}
    restart: unless-stopped
    depends_on:
      pdns-mariadb:
        condition: service_healthy
    env_file:
      - stack.env
    networks:
      - dns
    volumes:
      - pdns_upload:/opt/powerdns-admin/upload
    labels:  # TODO: Authentication
      caddy: "pdns.${DOMAIN}"
      caddy.reverse_proxy: "{{ upstreams 8080 }}"

  pdns-mariadb:
    container_name: pdns-mariadb
    image: docker.io/mariadb:${MARIADB_VERSION}
    restart: unless-stopped
    healthcheck:
      test: healthcheck.sh --connect --innodb_initialized
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - stack.env
    networks:
      - dns
    volumes:
      - pdns_data:/var/lib/mysql:Z

  netbox: &netbox
    container_name: netbox
    image: lscr.io/linuxserver/netbox:${NETBOX_VERSION}
    restart: unless-stopped
    depends_on:
      netbox-postgres:
        condition: service_healthy
      netbox-redis:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:8080/login/ || exit 1
      start_period: 90s
      interval: 15s
      timeout: 3s
      retries: 3
    env_file:
      - stack.env
    networks:
      - netbox
      - proxy
    volumes:
      - netbox_config:/config
    labels:  # TODO: Authentication
      caddy: "netbox.${DOMAIN}"
      caddy.reverse_proxy: "{{ upstreams 8000 }}"

  netbox-worker:
    <<: *netbox
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker
    healthcheck:
      test: ps -aux | grep -v grep | grep -q rqworker || exit 1
      start_period: 30s
      interval: 15s
      timeout: 3s
      retries: 3
    networks:
      - netbox

  netbox-postgres:
    container_name: netbox-postgres
    image: docker.io/postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    healthcheck:
      test: pg_isready -q -t 2 -d $${DB_NAME} -U $${DB_USER}
      start_period: 30s
      interval: 10s
      timeout: 30s
      retries: 5
    env_file:
      - stack.env
    networks:
      - netbox
    volumes:
      - netbox_data:/var/lib/postgresql/data

  netbox-redis:
    container_name: netbox-redis
    image: docker.io/valkey/valkey:${REDIS_VERSION}
    restart: unless-stopped
    command:
      - sh
      - -c
      - valkey-server --appendonly yes --requirepass $${REDIS_PASSWORD}
    healthcheck:
      test: '[ $$(valkey-cli --pass "$${REDIS_PASSWORD}" ping) = ''PONG'' ]'
      start_period: 5s
      timeout: 3s
      interval: 1s
      retries: 5
    env_file:
      - stack.env
    networks:
      - netbox
    volumes:
      netbox_redis:/data

networks:
  dns:
  netbox:
  proxy:
    external: true

volumes:
  adguardhome_config:
  adguardhome_work:
  pdns_data:
  pdns_upload:
  netbox_config:
  netbox_data:
  netbox_redis:
